package sbi;

import java.util.Scanner;

class Bank{

	public int acc_bal;
	
	Bank() {
		 
		acc_bal = (int)(1000 * Math.random());
	 }
	 
	 public synchronized boolean withdrawal(int amount)throws InterruptedException{
			
		 
		 
		 if(acc_bal>=amount) {
			 System.out.println("Initial amount in the account: "+ acc_bal);
			 acc_bal-=amount;
			 //wait();
			 return true;
		 }
		 return false;
		 //notifyAll();

	 }
	 
	 
	 
	 public synchronized void deposit(int amount, boolean bool)throws InterruptedException{
			
		 if(bool==true)
			 acc_bal+=amount;
		 //notifyAll();
	 }
	 
	 public void total_balance(int with, int dep) {
		 
		 acc_bal=acc_bal-with+dep;
	 }

}

class trans{
	
	int t_sender;
	int t_receiver;
	int t_amount;
	
	trans() {
		

		int s = (int)(10000* Math.random());
		int r = (int)(10000* Math.random());
		while(s!=r) {
			r = (int)(10000* Math.random());
		}
		int amt = (int)(1000 * Math.random());
		
		t_sender=s;
		t_receiver=r;
		t_amount=amt;
	}
	
	public void prints() {
		
		System.out.printf("Sender: ",t_sender);
		
	}
	public void printt() {
		
		System.out.printf("Receiver: ",t_receiver);
	}

	public void printa() {
		
		System.out.printf("Amount: ",t_amount);

	}

}

class Combine{
	
	//making an array
	
	public trans[] trans_arr= new trans[100000];
	public Bank[] bank= new Bank[10000];
	
	Combine() {

		int i;
		//initialising each element in transaction and bank
		for (i=0;i<100000;i++) {
			
			trans_arr[i]= new trans();
		}
		for (i=0;i<10000;i++) {

			bank[i]= new Bank();
		}
		System.out.println("In combine, completed randomly assigning account balance and transaction details.");
	}
	
	public void printBank_detail(){
		
		int i=0;
		for (i=0;i<10000;i++) {
			
			//System.out.printf("Balance in Acc[%d] before transactions is: ", bank[i], bank[i].acc_bal);
		}
	}

	public void printTrans_detail(){
		
		int i=0;
		for (i=0;i<100000;i++) {
			
			//System.out.printf("Balance in Acc[%d] after Transactions is: ", bank[i], bank[i].acc_bal);
		}
	}


}


class Transactions extends Thread{
	
	int a, b;
	//private final CountDownLatch stopLatch;
	
	Combine temp_cmb;
	Transactions(Combine cmb,int at, int bt/*, CountDownLatch stopLatch*/){
		a=at;b=bt;
		temp_cmb=cmb;
		//this.stopLatch=stopLatch;
	}
	
	//overiding run() in Thread
	
	public void run() {
		
		int i;
		for(i=a;i<b;i++) {

			//System.out.printf("a: %d b: %d i: %d\n",a, b, i);
			
			
			
			int s= temp_cmb.trans_arr[i].t_sender;
			int r= temp_cmb.trans_arr[i].t_receiver;
			int amt= temp_cmb.trans_arr[i].t_amount;
			boolean bool=true;
				
			System.out.printf("Initial amt in %s is %s\n", s, temp_cmb.bank[s].acc_bal);
			
			try {
				bool=temp_cmb.bank[s].withdrawal(amt);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.printf("Final amt in %s is %s\n", s, temp_cmb.bank[s].acc_bal);
			try {
				temp_cmb.bank[r].deposit(amt, bool);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		//stopLatch.countDown();
	}

}

public class sbi {
	
	public static void main(String[] args)throws Exception {
		// TODO Auto-generated method stub

		System.out.println("In main");
		Combine cmb= new Combine();
		
		int trans=100000;
		int j=0,A=100,B=10, C=10;
		int[] arr= new int[10];
		for(j=0;j<10;j++) {
			arr[j]=A*B-C;}
		
		
		System.out.println("The Random generation is complete.");
		
		
		int i=0;
		int total_sum=0;
		for(i=0;i<10000;i++) {
			
			total_sum+=cmb.bank[i].acc_bal;
			
		}
		System.out.printf("Total Sum Initial: %d\n", total_sum);

		//Creating multiple threads
		Scanner sc= new Scanner(System.in);
		
		int choice=0;
		
		System.out.println("Enter 1 for single thread execution");
		System.out.println("Enter 2 for double thread execution");
		System.out.println("Enter 3 for triple thread execution");
		System.out.println("Enter 4 for quadruple thread execution");
		choice= sc.nextInt();
		
		if(choice==1) {
			
			Thread t1= new Thread(new Transactions(cmb ,0, trans));
			long start = System.nanoTime();
			
			//Calling all the threads to work simultaneously
			
			t1.start();
			
			try
			{
				Thread.sleep(100);
			}catch(InterruptedException e1)
			{
				e1.printStackTrace();
			}
			
			long stop = System.nanoTime();
			long time= stop-start;
//			cdl.await();
			System.out.printf("Tasks took %.4f ms to run%n", time/1e6);
			
			
			t1.join();
			total_sum=0;
			for(i=0;i<10000;i++) {
				
				total_sum+=cmb.bank[i].acc_bal;
				
			}
			System.out.printf("Total Sum Final: %d", total_sum);

		}
		else if(choice==2) {
			Thread t1= new Thread(new Transactions(cmb ,0, trans/2));
			
			Thread t2= new Thread(new Transactions(cmb,trans/2+1, trans));	
			long start = System.nanoTime();
			
			//Calling all the threads to work simultaneously
			
			t1.start();
			t2.start();
			
			try
			{
				Thread.sleep(100);
			}catch(InterruptedException e1)
			{
				e1.printStackTrace();
			}
			
			long stop = System.nanoTime();
			long time= stop-start;
//			cdl.await();
			
			
			System.out.printf("Tasks took %.4f ms to run%n", time/1e6);
			
			
			t1.join();
			t2.join();
			total_sum=0;
			for(i=0;i<10000;i++) {
				
				total_sum+=cmb.bank[i].acc_bal;
				
			}
			System.out.printf("Total Sum Final: %d", total_sum);

		}
		
		else if(choice==3) {
			Thread t1= new Thread(new Transactions(cmb ,0, trans/3));
			
			Thread t2= new Thread(new Transactions(cmb,trans/3+1, trans*2/3));	
			
			Thread t3= new Thread(new Transactions(cmb,trans*2/3+1, trans));
		
			long start = System.nanoTime();
			
			//Calling all the threads to work simultaneously
			
			t1.start();
			t2.start();
			t3.start();
			
			try
			{
				Thread.sleep(100);
			}catch(InterruptedException e1)
			{
				e1.printStackTrace();
			}
			
			long stop = System.nanoTime();
			long time= stop-start;
//			cdl.await();
			
			
			System.out.printf("Tasks took %.4f ms to run%n", time/1e6);
			
			
			t1.join();
			t2.join();
			t3.join();
			total_sum=0;
			for(i=0;i<10000;i++) {
				
				total_sum+=cmb.bank[i].acc_bal;
				
			}
			System.out.printf("Total Sum Final: %d", total_sum);

		}

		else if(choice==4) {
			
			Thread t1= new Thread(new Transactions(cmb ,0, trans/4));
			
			Thread t2= new Thread(new Transactions(cmb,trans/4+1, trans/2));
			
			Thread t3= new Thread(new Transactions(cmb,trans/2+1, trans*3/4));
			
			Thread t4= new Thread(new Transactions(cmb,trans*3/4+1, trans));
			
			long start = System.nanoTime();
			
			//Calling all the threads to work simultaneously
			
			t1.start();
			t2.start();
			t3.start();
			t4.start();
			
			try
			{
				Thread.sleep(100);
			}catch(InterruptedException e1)
			{
				e1.printStackTrace();
			}
			
			long stop = System.nanoTime();
			long time= stop-start;
//			cdl.await();
			
			
			System.out.printf("Tasks took %.4f ms to run%n", time/1e6);
			
			
			t1.join();
			t2.join();
			t3.join();
			t4.join();
			total_sum=0;
			for(i=0;i<10000;i++) {
				
				total_sum+=cmb.bank[i].acc_bal;
				
			}
			System.out.printf("Total Sum Final: %d", total_sum);

		}
		
		
	}
}
